@model ButterCheeseEggs.Models.GameState

@{
    ViewData["Title"] = "Play page";
}

<div>
    <div class=" align-top text-center">
        @if (!Model.IsGameFinished)
        {
            <p>
                Current player:
            </p>
            <p>
                <img src="@SelectImageForNextPlayer()" width="30" height="30">
            </p>
        }
        else
        {
            <p>
                <b>Winner is:</b>
            </p>
            <p>
                <img src="@SelectImageForWinner()" width="30" height="30">
            </p>
            }

        </div>
        <br />
        <br />

        @if (!Model.IsGameFinished)
        {
            <div class="align-content-center">
                <table>
                    <tbody>
                     @for (int y = 0; y < Model.Table.YSize; y++)
                        {
                        <tr>
                            @for (int x = 0; x < Model.Table.XSize; x++)
                            {
                                @if (IsEmptyTile(x, y))
                                {
                                    <td>
                                        <a href="@GetMakeMoveLink(x, y)">
                                            <img src="@SelectImageForTile(x, y)" width="100" height="100">
                                        </a>
                                    </td>
                                }
                                else
                                {
                                    <td class="nohover">
                                        <img src="@SelectImageForTile(x, y)" width="100" height="100">
                                    </td>
                                }
                            }
                        </tr>
                         }
                    </tbody>
                 </table>
        </div>
    }
    else
    {
        <div class="align-content-center">
                <table>
                    <tbody>
                     @for (int y = 0; y < Model.Table.YSize; y++)
                        {
                        <tr>
                            @for (int x = 0; x < Model.Table.XSize; x++)
                            {
                                @if (IsEmptyTile(x, y))
                                {
                                    <td class="nohover">
                                        <img src="/img/tile_empty.svg" width="100" height="100">
                                    </td>
                                }
                                else
                                {
                                    <td class="nohover">
                                        <img src="@SelectImageForTile(x, y)" width="100" height="100">
                                    </td>
                                }
                            }
                        </tr>
                         }
                    </tbody>
                 </table>
        </div>
    }

    <br />
    <br />
    <div class="align-text-bottom text-center">
        <p>
            <a class="btn btn-lg btn-outline-dark" asp-controller="Game" asp-action="Reset">Reset</a>
        </p>
    </div>
</div>



@{
    string SelectImageForTile(int x, int y)
    {
        TileStates state = Model.Table[x, y];

        switch (state)
        {
            case TileStates.Empty:
                return "/img/tile_empty.svg";
            case TileStates.O:
                return "/img/tile_o.svg";
            case TileStates.X:
                return "/img/tile_x.svg";
            default:
                throw new NotSupportedException("Tile state not supported: " + state);
        }
    }

    string SelectImageForNextPlayer()
    {
        Players player = Model.NextStepBy;

        switch (player)
        {
            case Players.None:
                return "/img/tile_empty.svg";
            case Players.O:
                return "/img/tile_o.svg";
            case Players.X:
                return "/img/tile_x.svg";
            default:
                throw new NotSupportedException("Tile state not supported: " + player);
        }
    }


    string SelectImageForWinner()
    {
        Players winner = Model.Winner;

        switch (winner)
        {
            case Players.None:
                return "It's a tie!";
            case Players.O:
                return "/img/tile_o.svg";
            case Players.X:
                return "/img/tile_x.svg";
            default:
                throw new NotSupportedException("Winner state not supported: " + winner);
        }
    }


    string GetMakeMoveLink(int x, int y)
    {
        return $"MakeMove/{x}/{y}";
    }


    bool IsEmptyTile(int x, int y)
    {
        TileStates state = Model.Table[x, y];

        if (state == TileStates.Empty)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

}